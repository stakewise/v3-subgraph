"""
Vault allocator
"""
type Allocator @entity {
  "<Vault ID>-<Allocator address>"
  id: ID!

  "The allocator's address"
  address: Bytes!

  "The allocator's shares amount"
  shares: BigInt!

  "The vault of the allocator"
  vault: Vault!
}

"""
Vault exit request
"""
type ExitRequest @entity {
  "<Vault ID>-<Exit queue id>"
  id: ID!

  "The exit queue position counter"
  positionCounter: BigInt!

  "The exiting shares owner"
  owner: Bytes!

  "The exited assets receiver"
  receiver: Bytes!

  "The number of shares queued for exit"
  totalShares: BigInt!

  "The exit request vault"
  vault: Vault!
}

"""
Vault
"""
type Vault @entity {
  "Vault address"
  id: ID!

  "The vault token name"
  tokenName: String!

  "The vault token symbol"
  tokenSymbol: String!

  "The optional vault name extracted from metadata IPFS file"
  displayName: String

  "The optional description extracted from metadata IPFS file"
  description: String

  "The optional image URL extracted from metadata IPFS file"
  imageUrl: String

  "The address of the factory used to create vault"
  factory: Bytes!

  "The address of the vault admin"
  admin: Bytes!

  "The max total assets that can be allocated into the vault"
  capacity: BigInt!

  "The staking fee percent charged by the vault"
  feePercent: Int!

  "The address of the vault's fee recipient"
  feeRecipient: Bytes!

  "The address of the vault's operator"
  operator: Bytes!

  "Average reward on one asset"
  avgRewardPerAsset: BigDecimal!

  "The MEV and priority fees escrow address. If it's null, then the vault uses shared MEV escrow."
  mevEscrow: Bytes

  "The vault validators merkle tree root"
  validatorsRoot: Bytes

  "The vault metadata IPFS hash"
  metadataIpfsHash: String

  "The vault rewards root"
  rewardsRoot: Bytes

  "The last vault rewards update timestamp"
  rewardsTimestamp: BigInt

  "The vault rewards IPFS hash"
  rewardsIpfsHash: String

  "The vault reward used to submit state update proof"
  proofReward: BigInt

  "The vault unlocked MEV reward used to submit state update proof"
  proofUnlockedMevReward: BigInt

  "The vault allocators"
  allocators: [Allocator!]! @derivedFrom(field: "vault")

  "The vault locked MEV reward"
  lockedMevReward: BigInt

  "The vault rewards root proof used to submit state update proof"
  proof: [String!]

  "The vault allocators' actions"
  allocatorActions: [AllocatorAction!]! @derivedFrom(field: "vault")

  "The vault exit requests"
  exitRequests: [ExitRequest!]! @derivedFrom(field: "vault")

  "The vault day snapshots"
  daySnapshots: [DaySnapshot!]! @derivedFrom(field: "vault")

  "The total number of shares"
  totalShares: BigInt!

  "The vault score"
  score: BigDecimal!

  "The total number of assets"
  totalAssets: BigInt!

  "The number of shares queued for the exit"
  queuedShares: BigInt!

  "The number of assets that are waiting to be claimed after exit"
  unclaimedAssets: BigInt!

  "The number of assets used for rewardPerAsset calculation"
  principalAssets: BigInt!

  "Indicates whether the Vault is private"
  isPrivate: Boolean!

  "If the Vault is private, whitelister can add/remove allocators"
  whitelister: Bytes

  "Vault address string for search"
  addressString: String!

  "The timestamp the metadata was updated at"
  metadataUpdatedAt: BigInt

  "The timestamp the vault was created at"
  createdAt: BigInt!
}

enum AllocatorActionType {
  Deposit
  Redeem
  VaultCreation
  ExitQueueEntered
  ExitedAssetsClaimed
}

"""
Allocator action
"""
type AllocatorAction @entity {
  "Set to `transaction hash-log index`"
  id: ID!

  "The allocator's vault"
  vault: Vault!

  "The allocator's address"
  address: Bytes!

  "The type of the action"
  actionType: AllocatorActionType!

  "The amount of action's assets"
  assets: BigInt

  "The amount of action's shares"
  shares: BigInt

  "The timestamp the action was created at"
  createdAt: BigInt!
}

type DaySnapshot @entity {
  "<Vault ID>-<date>"
  id: ID!

  "The timestamp rounded to current day by dividing by 86400"
  date: Int!

  "The total number of assets"
  totalAssets: BigInt!

  "The reward on one asset"
  rewardPerAsset: BigDecimal!

  "The snapshot's vault"
  vault: Vault!
}

"""
Network data
"""
type Network @entity {
  "Always 0"
  id: ID!

  "Total vaults"
  vaultsTotal: Int!
}

"""
Account that is whitelisted in the private Vault
"""
type PrivateVaultAccount @entity {
  "<Vault ID>-<address>"
  id: ID!

  "The address of the account"
  address: Bytes!

  "The private Vault"
  vault: Vault!

  "The timestamp when the account was added"
  createdAt: BigInt!
}

"""
StakeWise V3 transaction
"""
type Transaction @entity {
  "Transaction hash"
  id: ID!
}
